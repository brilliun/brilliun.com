<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Brilliun&#39;s Blog</title>
    <link>https://brilliun.com/tags/database/</link>
    <description>Recent content in Database on Brilliun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Dec 2019 21:48:35 +0900</lastBuildDate>
    
	<atom:link href="https://brilliun.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Designing Data Intensive Applications - Part II</title>
      <link>https://brilliun.com/2019/12/designing-data-intensive-applications-part-ii/</link>
      <pubDate>Mon, 09 Dec 2019 21:48:35 +0900</pubDate>
      
      <guid>https://brilliun.com/2019/12/designing-data-intensive-applications-part-ii/</guid>
      <description>CH03. Storage and Retrieval Why should application developers care how the database handles storage and retrieval internally? Because there is a big difference between storage engines that are optimized for transactional workloads and those that are optimized for analytics.
There are two families of commonly used storage engines: log-structured storage engines, and page-oriented storage engines such as B-trees.
Data Structures That Power Your Database Consider the worldâ€™s simplest database, implemented as two Bash functions:</description>
    </item>
    
    <item>
      <title>Designing Data Intensive Applications - Part I</title>
      <link>https://brilliun.com/2019/06/designing-data-intensive-applications-part-i/</link>
      <pubDate>Wed, 05 Jun 2019 22:36:35 +0900</pubDate>
      
      <guid>https://brilliun.com/2019/06/designing-data-intensive-applications-part-i/</guid>
      <description>CH01. Reliable, Scalable, and Maintainable Applications About Data System We can think of any kind of databases, queues, or caches as a data system. Nowadays, these tools are optimized for a variety of different uses, and they no longer neatly fit into their origin categories
For example, there are data stores that are also used as message queues (Redis), and there are message queues with database-like durability guarantees (Apache Kafka).</description>
    </item>
    
  </channel>
</rss>